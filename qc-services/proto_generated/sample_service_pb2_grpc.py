# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import proto_generated.sample_service_pb2 as sample__service__pb2


class QuestionClassificationServicesStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getSampleQuestions = channel.unary_unary(
                '/QuestionClassificationServices/getSampleQuestions',
                request_serializer=sample__service__pb2.GetQuestionsMessage.SerializeToString,
                response_deserializer=sample__service__pb2.GetQuestionsMessage.FromString,
                )
        self.getTaggedQuestions = channel.unary_unary(
                '/QuestionClassificationServices/getTaggedQuestions',
                request_serializer=sample__service__pb2.QuestionPOSTagging.SerializeToString,
                response_deserializer=sample__service__pb2.QuestionPOSTagging.FromString,
                )


class QuestionClassificationServicesServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getSampleQuestions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTaggedQuestions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QuestionClassificationServicesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getSampleQuestions': grpc.unary_unary_rpc_method_handler(
                    servicer.getSampleQuestions,
                    request_deserializer=sample__service__pb2.GetQuestionsMessage.FromString,
                    response_serializer=sample__service__pb2.GetQuestionsMessage.SerializeToString,
            ),
            'getTaggedQuestions': grpc.unary_unary_rpc_method_handler(
                    servicer.getTaggedQuestions,
                    request_deserializer=sample__service__pb2.QuestionPOSTagging.FromString,
                    response_serializer=sample__service__pb2.QuestionPOSTagging.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'QuestionClassificationServices', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class QuestionClassificationServices(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getSampleQuestions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QuestionClassificationServices/getSampleQuestions',
            sample__service__pb2.GetQuestionsMessage.SerializeToString,
            sample__service__pb2.GetQuestionsMessage.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getTaggedQuestions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QuestionClassificationServices/getTaggedQuestions',
            sample__service__pb2.QuestionPOSTagging.SerializeToString,
            sample__service__pb2.QuestionPOSTagging.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
